<Ctrl-f> - на страницу (экран) вниз;
<Ctrl-b> - на страницу (экран) верх;
<Ctrl-d> - на пол страницы (экрана) вниз;
<Ctrl-u> - на пол страницы (экрана) верх;
<Ctrl-y> - на строку вниз, без изменения положения курсора;
<Ctrl-e> - на строку верх, без изменения положения курсора;
0 («ноль») - в начало текущей строки;
^ - в начало текущей строки (к первому непробельному символу);
$ - в конец текущей строки;
w - на слово вправо;
b - на слово влево;
W - до пробела вправо;
B - до пробела влево;
} - абзац вниз;
{ - абзац вверх;
gg - перейти в начало файла;
G - перейти в конец файла;
<number>G - перейти на конкретную строку <number>;
/<text><CR> - перейти к <text>;
?<text><CR> - то же самое, но искать назад;
n - повторить поиск;
N - повторить поиск назад;
[[ - в начало функции;
'' - к месту выполнения команды [[

i — перейти в режим ввода с текущей позиции
a — перейти в режим ввода после курсора
I — переместиться в начало строки и перейти в режим ввода
А — переместиться в конец строки и перейти в режим ввода
o — перейти в режим ввода с новой строки под курсором
O — перейти в режим ввода с новой строки над курсором
s - заменяет указанное количество символов (удаляет указанное число символов и переходит в режим ввода). В отличии от команды с которая может удалить кусок текста размером не меньше слова (cw), командой s можно удалить любое число символов. Например 4s удалит четыре символа начиная с того который находится под курсором. Эта команда применяется для замены одного или нескольких символов другими символами.
S - удаляет всю текущую строку и переходит в режим ввода. Число перед командой показывает сколько нужно удалить строк начиная с текущей. Например 4S удалит четыре строки включая текущую.
R — перейти в режим ввода с заменой текста (аналог insert). Символы под курсором заменяются на вводимые. Команда применяется когда неизвестно сколько придётся изменить символов на другие (иначе можно было бы использовать команду s с указанием числа заменяемых символов, например, 7s). При удалении вводимых символов возвращаются те которые были до ввода команды. Такой режим сохраняется до конца строки. При вводе новой строки (по нажатию Enter), происходит не переход на другую строку с тем же режимом замены текста, а создание новой строки.
r — заменить один символ. Заменяет символ находящийся под курсором на символ который следует за командой. При этом не происходит выхода из командного режима (не надо нажимать ESC после изменения текста). Например, команда ry - символ под курсором меняется на "y". Числовой показатель указывает сколько символов необходимо заменить на данный. Например, 3ry вставляет три символа "y".


x — удалить символ под курсором (<число>x удаляет указанное число символов начиная с того который находится под курсором);
X — удалить символ влево (удалить символ перед курсором);
d — используется совместно с командами перемещения. Удаляет символы с текущего положения курсора до положения после ввода команды перемещения. Пример:
dw - удаляет символы с текущего до конца слова. включая пробел после слова, чтобы удалить символы до конца слова, но оставить пробел используется команда de,
dE - удаляет символы с текущего до конца слова, включая символы пунктуации, но оставляет пробел после слова,
diw - удаляет слово под курсором,
dd — удалить текущую строку (вырезать);
d<число>d или <число>dd — стирание числа строк начиная с текущей;
db - удаляет символы с текущего до начала слова (удаление в обратном направлении);
d0 - удаление символов с начала строки до текущего положения курсора;
d$ или D - удаление символов с текущего положения курсора до конца строки;
— команда аналогичная d, но после удаление переходит в режим ввода;
сс - команда удаляет текущую строку и переходит в режим ввода;
C - удаляет текст с текущего положения курсора до конца строки, аналогична команде с$ (где $ - символ конца строки);
yy (также Y) — копирование текущей строки в буфер;
y<число>y — копирование числа строк начиная с текущей в буфер;
p — вставка содержимого буфера под курсором. Поскольку в vim девять ячеек буфера удаления. Можно вставить не только последнее удаление, но и удаления сделанные ранее. Например "4p" вставит под курсор содержимое четвертого удаления начиная с последнего. Также чтобы поменять местами два символа можно использовать комбинацию команд "удалить" -x (удаление в буфер) и "вставить" - p (вставить из буфера). Таким образом, поставив курсор на первую букву из двух которые необходимо поменять местами и нажав комбинацию клавиш xp мы совершим необходимые действия;
P — вставка содержимого буфера перед курсором;
J — слияние текущей строки со следующей. Числовой аргумент перед командой показывает сколько следующих линий необходимо объединить с текущей. Например 2J объединить две следующие строки с текущей, на которой расположен курсор.

/фраза - поиск фразы во всем документе.
n - следующее найденное (вниз) N - предыдущее (вверх).


/word	Искать слово “word” сверху вниз
?word	Искать слово “word” снизу вверх
/jo[ha]n>	Искать “john” или “joan”
/\< the	Искать слова, начинающееся на “the”
/the\>	Искать слова, заканчивающиеся на “the”
/\< the\>	Искать “the” (точное соответствие)
/\< …. \>	Искать слова из четырех символов
/fred\|joe	Искать “fred” или “joe”
/\<\d\d\d\d\>	Искать 4 цифры подряд
/^\n\{3}	Искать 3 пустые строки
:bufdo /searchstr/	Искать во всех открытых файлах
Удаление
d^	Удалить все символы от текущей позиции до начала строки
d$	Удалить все символы от текущей позиции до конца строки
d/word	Удалить всё от текущей позиции до слова "word"
dfx	Удалить всё от текущей позиции до символа "x"
Замена
:%s/old/new/g	Заменить все вхождения “old” на “new”
:%s/old/new/gw	Заменить все вхождения “old” на “new” с запросом подтверждения
:2,35s/old/new/g	Заменить все вхождения “old” на “new” между 2 и 35 строками
:5,$s/old/new/g	Заменить все вхождения “old” на “new” начиная с 5 строки и до конца файла
:%s/^/hello/g	Добавить “hello” в начало каждой строки
:%s/$/Harry/g	Добавить “Harry” в конец каждой строки
:%s/onward/forward/gi	Заменить “onward” на “forward” с учетом регистра
:%s/ *$//g	Убрать все пробелы
:g/string/d	Удалить все строки, содержащие “string”
:v/string/d	Удалить все строки, не содержащие “string”
:s/Bill/Steve/	Заменить первое вхождение “Bill” на “Steve” в текущей строке
:s/Bill/Steve/g	Заменить все вхождения “Bill” на “Steve” в текущей строке
:%s/\r//g	Убрать символ возврата каретки (Такие тексты обычно приходят от windows-пользователей)
:%s#>[^<]\+>##g	Очистить текст от HTML-тегов
:%s/^\(.*\)\n\1$/\1/	Удалить строки, повторяющиеся дважды
Ctrl+a	Увеличить число под курсором на единицу
Ctrl+x	Уменьшить число под курсором на единицу
ggVGg?	Преобразовать текст в Rot13
Комментарий к замене: ...мне нужно во всем файле совершить замену

Abs[ 'выражение' ] -> | 'выражение' |

Если при описании разыскиваемой последовательности заключить какое-нибудь выражение в скобки \( \), то Vim поместит его в память под соответствующим номером (первое выражение под номером один, второе — два) и позволит в дальнейшем вызывать командой \x, где x — номер, под которым выражение было помещено в память.

Таким образом, нужная команда будет выглядеть примерно так:

:%s/Abs\[\([^\]]*\)\]/|\1|/g

Здесь стоит отметить, что для буквального совпадения квадратные скобки предваряются слешами, поскольку являются спецсимволами. Вообще любой спецсимвол, если должен участвовать в поиске, обозначая свое непосредственное значение, предваряется слешем: \^; \* и т.д. Сам слеш предваряется также слешем. Выглядит это так: для поиска последовательности '\cos' надо ввести '\\cos'.

...совершить замену вида

'Заглавная латинская буква''цифра' -> 'Заглавная латинская буква'_'цифра'

Самое тривиальное решение, которое напрашивается — перебрать все комбинации, если их немного. То есть, запустить замену сначала 'U1' -> 'U_1', потом 'U2' -> 'U_2' и т.п. Понятно, что это не наш метод. Мы вспомним, что есть квадратные скобки. И для того, чтобы найти одну заглавную латинскую букву, достаточно ввести шаблон '[A-Z]'. Но и это не предел. Для такого шаблона у Vim есть специальная аббревиатура: '\u' (от 'uppercase'). Для цифр же есть '\d' (от 'digit'). Подробнее о таких конструкциях можно почитать по адресу :help pattern.txt. С использованием этих аббревиатур команда для поиска примет вид

:%s/\(\u\)\(\d\)/\1_\2/g

Тут опять встречается группировка круглыми скобками: она позволяет при поиске поместить найденную букву и цифру в память под соотвествующими номерами, и впоследствии их оттуда извлечь, вызывая командами с теми же номерами: '\1' вызовет букву, а '\2' — цифру.
Регистр
Vu	Перевести строку в нижний регистр
VU	Перевести строку в верхний регистр
g~~	Инвертировать регистр
vEU	Перевести слово под курсором в верхний регистр
vE~	Инвертировать регистр слова
ggguG	Перевести весь текст в нижний регистр
:set ignorecase	Регистронезависимый поиск
:set smartcase	Игнорировать регистр при поиске, если в искомом выражении нет символов верхнего регистра
:%s/\<./\u&/g	Перевести первую букву каждого слова в верхний регистр
:%s/\<./\l&/g	Перевести первую букву каждого слова в нижний регистр
:%s/.*/\u&	Перевести первую букву первого слова в каждой строке в верхний регистр
:%s/.*/\l&	Перевести первую букву первого слова в каждой строке в нижний регистр
Чтение/запись файлов
:1,10 w outfile	Записать в outfile с первой по десятую строки
:1,10 w >> outfile	Добавить в outfile с первой по десятую строки
:r infile	Вставить содержимое файла infile
:23r infile	Вставить содержимое файла infile после 23 строки
Навигация по ФС
:e .	Открыть встроенный файл-менеджер
:Sex	Разбить окно и открыть встроенный файл менеджер
:browse e	Графический файл-менеджер
:ls	Список буферов
:cd ..	Перейти в родительскую директорию
:args	Список открытых файлов
:args *.php	Открыть все файлы с расширением *.php
:grep expression *.php	Показать список файлов с расширением php, содержащих в имени expression
gf	Открыть файл с именем, равным слову, находящемуся под курсором
Взаимодействие с ОС
:!pwd	Выполнить команду pwd и вернуться
!!pwd	Выполнить команду pwd и вставить результат в редактор
:sh	Открыть шелл
$exit	Вернуться в редактор из шелла
Выравнивание
:%!fmt	Выровнять все строки
!}fmt	Выровнять все строки в текущей позиции
5!!fmt	Выровнять следующие 5 строк
Вкладки
:tabnew	Создать новую вкладку
gt	Перейти на следующую вкладку
:tabfirst	Перейти на первую вкладку
:tablast	Перейти на последнюю вкладку
:tabm n(position)	Изменить порядок вкладок
:tabdo %s/foo/bar/g	Выполнить команду во всех вкладках
:tab ball	Поместить все открытые файлы во вкладки
Разделение окна
:e filename	Редактировать filename в текущем окне
:split filename	Разделить окно и открыть filename
ctrl-w + стрелка ВВЕРХ	Переместить курсор в верхнее окно
ctrl-w ctrl-w	Переместить курсор в следующее окно
ctrl-w ctrl-p	Переместить курсор в предыдущее окно(вернуться назад)
ctrl-w ctrl-x	Поменять окна местами
ctrl-w_	Максимизировать текущее окно
ctrl-w=	Подогнать окна по размеру
10 ctrl-w+	Увеличить текущее окно на 10 строк
:vsplit file	Вертикально разделить окно
:sview file	Разделить окно и открыть file только для чтения
:hide	Закрыть текущее окно
:only	Закрыть все окна, кроме текущего
:b 2	Открыть #2 в текущем окне
Автодополнение
Ctrl+n Ctrl+p (в режиме вставки)	Дополнить слово
Ctrl+x Ctrl+l	Дополнить строку
:set dictionary=dict	Установить словарь
Ctrl+x Ctrl+k	Дополнение из словаря
Метки
mk	Пометить текущую позиция как k
‘k	Перейти к метке k
d’k	Удалить все до метки k
d’a,’k	Удалить все от метки a до метки k

============================NERDTree==================================

" File node mappings~
" double-click,
" o: open in prev window
" go: preview
" t: open in new tab
" T: open in new tab silently
" middle-click,
" i: open split
" gi: preview split
" s: open vsplit
" gs: preview vsplit
" <CR>: custom open
"
" ----------------------------
" Directory node mappings~
" double-click,
" o: open & close node
" O: recursively open node
" t: open in new tab
" T: open in new tab silently
" <CR>: custom open
" x: close parent of node
" X: close all child nodes of
"    current node recursively
" middle-click,
" e: explore selected dir
"
" ----------------------------
" Bookmark table mappings~
" double-click,
" o: open bookmark
" go: preview file
" go: find dir in tree
" t: open in new tab
" T: open in new tab silently
" i: open split
" gi: preview split
" s: open vsplit
" gs: preview vsplit
" <CR>: custom open
" D: delete bookmark
"
" ----------------------------
" Tree navigation mappings~
" P: go to root
" p: go to parent
" K: go to first child
" J: go to last child
" <C-j>: go to next sibling
" <C-k>: go to prev sibling
"
" ----------------------------
" Filesystem mappings~
" C: change tree root to the
"    selected dir
" u: move tree root up a dir
" U: move tree root up a dir
"    but leave old root open
" r: refresh cursor dir
" R: refresh current root
" m: Show menu
" cd:change the CWD to the
"    selected dir
" CD:change tree root to CWD
"
" ----------------------------
" Tree filtering mappings~
" I: hidden files (off)
" f: file filters (on)
" F: files (on)
" B: bookmarks (off)
"
" ----------------------------
" Custom mappings~
"
" ----------------------------
" Other mappings~
" q: Close the NERDTree window
" A: Zoom (maximize-minimize)
"    the NERDTree window
" ?: toggle help
"
